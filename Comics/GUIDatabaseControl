import os
from tkinter import *
from tkinter.ttk import *


#Making lists
Name = []
Stock = []
Price = []
Labels = []
receipt = []
spacer = "-=-"
orderstart = True
TotalSold = 0
Windowx = "550"
Windowy = "500"
WindowName = "Comic Book Shop"
window = Tk()
window.title(WindowName)
window.geometry(Windowx + "x"+ Windowy)
MenuF = Frame(window)
DisplayF = Frame(window)
ControlPush = Frame(window)
ControlRemove = Frame(window)
ControlAddStock = Frame(window)
ControlSale = Frame(window)
ReceiptF = Frame(window)
TotalSoldF = Frame(window,  relief="solid", borderwidth=2)
IDL = Label(DisplayF, text="ID:", borderwidth=2,width = 5, relief="solid")
IDL.grid(column=0,row=1)
NameL = Label(DisplayF, text="Name:", borderwidth=2,width = 25, relief="solid")
NameL.grid(column=1,row=1)
StockL = Label(DisplayF, text="Stock:", borderwidth=2,width = 25, relief="solid")
StockL.grid(column=2,row=1)
PriceL = Label(DisplayF, text="Price:", borderwidth=2,width = 25, relief="solid")
PriceL.grid(column=3,row=1)




#Creates lists based off stored data in file
def Start():
    global TotalSold
    space = 0
    f = open("database.txt", "r")
    i = 1

    while True:
        data = str(f.readline())[:-1]
        i += 1
        if data == "":
            break
        if data[0] == "#":
            continue
        
        if str(data) == str(spacer):
            space += 1
        elif space == 0:
            Name.append(data)
        elif space == 1:
            Stock.append(data)
        elif space == 2:
            Price.append(data)
        elif space == 3:
            TotalSold = data
        elif space == 4:
            break

    
    PushB = Button(MenuF,width=10,text="Push",command=Push)
    PushB.grid(column=1, row=1)
    RemoveB = Button(MenuF,width=10,text="Remove",command=Remove)
    RemoveB.grid(column=3, row=1)
    SaleB = Button(MenuF,width=10,text="Sell",command=Sale)
    SaleB.grid(column=4, row=1)
    AddStockB = Button(MenuF,width=11,text="Add Stock",command=AddStock)
    AddStockB.grid(column=5, row=1)
    CloseB = Button(MenuF,width=10,text="Close",command=Close)
    CloseB.grid(column=7, row=1)

    f.close()
    Reload()

def Reload():
    i = 0
    for TableItem in Labels:
        TableItem.grid_forget()
    while i < len(Name):
        TableItem = Label(DisplayF, text=i + 1, borderwidth=2,width = 5, relief="groove")
        TableItem.grid(column=0,row=i + 2)
        Labels.append(TableItem)
        TableItem = Label(DisplayF, text=Name[i], borderwidth=2,width = 25, relief="groove")
        TableItem.grid(column=1,row=i + 2)
        Labels.append(TableItem)
        TableItem = Label(DisplayF, text=Stock[i], borderwidth=2,width = 25, relief="groove")
        TableItem.grid(column=2,row=i + 2)
        Labels.append(TableItem)
        TableItem = Label(DisplayF, text=Price[i], borderwidth=2,width = 25, relief="groove")
        TableItem.grid(column=3,row=i + 2)
        Labels.append(TableItem)
        i += 1
    TotalSoldF.pack()
    TableItem = Label(TotalSoldF, text="Total Sold:")
    TableItem.grid(column=1,row=1)
    Labels.append(TableItem)
    TableItem = Label(TotalSoldF, text=TotalSold,justify=RIGHT)
    TableItem.grid(column=2,row=1)
    Labels.append(TableItem)
    Menu()
    



def AddStock():
    global state
    state = 0
    DisplayF.pack_forget()
    MenuF.pack_forget()
    TotalSoldF.pack_forget()
    ControlAddStock.pack()
    AddStockIDLabel = Label(ControlAddStock,text="ID:")
    AddStockIDLabel.grid(column=1, row=4)
    AddStockIDEntry = Entry(ControlAddStock,width=10)
    AddStockIDEntry.grid(column=2, row=4)


    def AddStockSubmitted():

        AddStockID = int(AddStockIDEntry.get()) - 1

        AddStockIDEntry.grid_forget()
        AddStockIDLabel.grid_forget()

        AddStockNameLabel = Label(ControlAddStock,text=Name[AddStockID] + " stock:")
        AddStockNameLabel.grid(column=2, row=0)
        AddStockCurrentLabel = Label(ControlAddStock,text=Stock[AddStockID])
        AddStockCurrentLabel.grid(column=1, row=1)
        AddStockAddLabel = Label(ControlAddStock,text="+")
        AddStockAddLabel.grid(column=2, row=1)
        AddStockNewEntry = Entry(ControlAddStock,width = 5)
        AddStockNewEntry.grid(column=3, row=1)

        def AddStockFinish(AddStockID):
            AddStockNewEntryValue = int(AddStockNewEntry.get())
            Stock[AddStockID] =  int(Stock[AddStockID]) + int(AddStockNewEntryValue)
            ControlAddStock.pack_forget()
            AddStockCurrentLabel.grid_forget()
            AddStockAddLabel.grid_forget()
            AddStockNewEntry.grid_forget()
            Save()

        def AddStockStop():
            AddStockNameLabel.grid_forget()
            AddStockCurrentLabel.grid_forget()
            AddStockAddLabel.grid_forget()
            AddStockNewEntry.grid_forget()
            ControlAddStock.pack_forget()
            Save()
        
        AddStockSubmit = Button(ControlAddStock,text="Submit",command=lambda: AddStockFinish(AddStockID),width=10)
        AddStockSubmit.grid(column=2, row=5)
        AddStockStop = Button(ControlAddStock,text="Back",command=AddStockStop,width=10)
        AddStockStop.grid(column=2, row=6)
        
        
    AddStockSubmit = Button(ControlAddStock,text="Submit",command=AddStockSubmitted,width=10)
    AddStockSubmit.grid(column=2, row=5)
    
    def AddStockStop():
        AddStockIDEntry.grid_forget()
        AddStockIDLabel.grid_forget()
        ControlAddStock.pack_forget()
        Save()
    AddStockStop = Button(ControlAddStock,text="Back",command=AddStockStop,width=10)
    AddStockStop.grid(column=2, row=6)

def Close():
    window.quit
    print("Closing...")



#Remove data:
def Remove():
    DisplayF.pack_forget()
    MenuF.pack_forget()
    TotalSoldF.pack_forget()
    ControlRemove.pack()
    RemoveIDLabel = Label(ControlRemove,text="ID:")
    RemoveIDLabel.grid(column=1, row=4)
    RemoveIDEntry = Entry(ControlRemove,width=10)
    RemoveIDEntry.grid(column=2, row=4)
    
    
   
    def RemoveStop():
        ControlRemove.pack_forget()
        Save()
    RemoveStop = Button(ControlRemove,text="Back",command=RemoveStop,width=10)
    RemoveStop.grid(column=2, row=8)
    
    def RemoveSubmitted():
        if int(RemoveIDEntry.get()) == 3412:
            Reset()
        elif int(RemoveIDEntry.get()) != 3412:
            Name.pop(int(RemoveIDEntry.get()) - 1)
            Stock.pop(int(RemoveIDEntry.get()) - 1)
            Price.pop(int(RemoveIDEntry.get()) - 1)
            ControlRemove.pack_forget()
            Save()
    RemoveSubmit = Button(ControlRemove,text="Submit",command=RemoveSubmitted,width=10)
    RemoveSubmit.grid(column=2, row=7)


    
#Make a sale data:
def Sale():
    
    if orderstart == True:
        receipt = []
    global TotalSold
    DisplayF.pack_forget()
    MenuF.pack_forget()
    TotalSoldF.pack_forget()
    ControlSale.pack()
    SaleIDLabel = Label(ControlSale,text="ID:")
    SaleIDLabel.grid(column=1, row=4)
    SaleAmountLabel = Label(ControlSale,text="Amount:")
    SaleAmountLabel.grid(column=1, row=5)
    SaleAmountEntry = Entry(ControlSale,width=10)
    SaleAmountEntry.grid(column=2, row=5)
    SaleIDEntry = Entry(ControlSale,width=10)
    SaleIDEntry.grid(column=2, row=4)
    
    def SaleSubmitted():
        SaleAmountLabel.grid_forget()
        SaleIDEntry.grid_forget()
        SaleAmountEntry.grid_forget()
        SaleIDLabel.grid_forget()
        SaleSubmit.grid_forget()
        ID = int(SaleIDEntry.get()) - 1
        Amount = int(SaleAmountEntry.get())
        global receipt
        receipt.append(ID)
        receipt.append(Amount)
        global orderstart
        orderstart = False

        print(receipt)
        
        
        def SaleMore():
            SaleMore.grid_forget()
            SaleFinish.grid_forget()
            global receipt
            Sale()
            
        SaleMore = Button(ControlSale,text="Buy more",command=SaleMore,width=10)
        SaleMore.grid(column=2, row=6)

        def SaleFinish():
            global receipt
            prices = []
            amounts = []
            total_amount = 0
            total_price = 0
            i = 0
            while i < len(receipt):
                SaleMore.grid_forget()
                SaleFinish.grid_forget()
                ControlSale.pack_forget()
                ReceiptF.pack()
                tempID = receipt[i]
                Stock[tempID] = int(Stock[tempID]) - int(receipt[i + 1])
                prices.append(float(Price[tempID]) * int(receipt[i + 1]))
                total_price += float(Price[tempID]) * int(receipt[i + 1])
                amounts.append(int(receipt[i + 1]))
                total_amount += int(receipt[i + 1])
                i += 2

            i = 0
            ItemNumber = 1
            Receipts = []
            ReceiptItem = Label(ReceiptF, text="Item Number:", borderwidth=2,width = 15, relief="groove")
            ReceiptItem.grid(column=0,row=1)
            Receipts.append(ReceiptItem)
            ReceiptItem = Label(ReceiptF, text="Names:", borderwidth=2,width = 15, relief="groove")
            ReceiptItem.grid(column=1,row=1)
            Receipts.append(ReceiptItem)
            ReceiptItem = Label(ReceiptF, text="Amounts:", borderwidth=2,width = 15, relief="groove")
            ReceiptItem.grid(column=2,row=1)
            Receipts.append(ReceiptItem)
            ReceiptItem = Label(ReceiptF, text="Prices:", borderwidth=2,width = 15, relief="groove")
            ReceiptItem.grid(column=3,row=1)
            Receipts.append(ReceiptItem)
            while i < len(amounts):
                ReceiptItem = Label(ReceiptF, text=ItemNumber, borderwidth=2,width = 15, relief="groove")
                ReceiptItem.grid(column=0,row=i + 2)
                Receipts.append(ReceiptItem)
                ReceiptItem = Label(ReceiptF, text=Name[receipt[i]], borderwidth=2,width = 15, relief="groove")
                ReceiptItem.grid(column=1,row=i + 2)
                Receipts.append(ReceiptItem)
                ReceiptItem = Label(ReceiptF, text=amounts[i], borderwidth=2,width = 15, relief="groove")
                ReceiptItem.grid(column=2,row=i + 2)
                Receipts.append(ReceiptItem)
                ReceiptItem = Label(ReceiptF, text=prices[i], borderwidth=2,width = 15, relief="groove")
                ReceiptItem.grid(column=3,row=i + 2)
                Receipts.append(ReceiptItem)

                i += 1
                ItemNumber += 1
            ReceiptItem = Label(ReceiptF, text=total_amount, borderwidth=2,width = 15, relief="groove")
            ReceiptItem.grid(column=1,row=i + 4)
            Receipts.append(ReceiptItem)
            ReceiptItem = Label(ReceiptF, text="Total Amount:", borderwidth=2,width = 15, relief="groove")
            ReceiptItem.grid(column=1,row=i + 3)
            Receipts.append(ReceiptItem)
            ReceiptItem = Label(ReceiptF, text="Total price:", borderwidth=2,width = 15, relief="groove")
            ReceiptItem.grid(column=2,row=i + 3)
            Receipts.append(ReceiptItem)
            ReceiptItem = Label(ReceiptF, text=total_price, borderwidth=2,width = 15, relief="groove")
            ReceiptItem.grid(column=2,row=i + 4)
            Receipts.append(ReceiptItem)
            ReceiptItem = Label(ReceiptF, text="", borderwidth=2,width = 15)
            ReceiptItem.grid(column=1,row=i + 2)
            Receipts.append(ReceiptItem)
            ReceiptItem = Label(ReceiptF, text="", borderwidth=2,width = 15)
            ReceiptItem.grid(column=2,row=i + 2)
            Receipts.append(ReceiptItem)

            SaleComplete = Button(ReceiptF, text="Complete", command=Save,width=10)
            SaleStop.grid(column=2, row=i + 5)
            
            receipt = []
    
        SaleFinish = Button(ControlSale,text="Finish",command=SaleFinish,width=10)
        SaleFinish.grid(column=2, row=7)

        def SaleStopTwo():
            SaleMore.grid_forget()
            SaleFinish.grid_forget()
            SaleAmountLabel.grid_forget()
            SaleIDEntry.grid_forget()
            SaleAmountEntry.grid_forget()
            SaleIDLabel.grid_forget()
            SaleSubmit.grid_forget()
            ControlSale.pack_forget()
            global receipt
            receipt = []
            Save()
    
        SaleStop = Button(ControlSale,text="Back",command=SaleStopTwo,width=10)
        SaleStop.grid(column=2, row=8)
        
        
    SaleSubmit = Button(ControlSale,text="Submit",command=SaleSubmitted,width=10)
    SaleSubmit.grid(column=2, row=6)
    
    

    def SaleStop():
        SaleAmountLabel.grid_forget()
        SaleIDEntry.grid_forget()
        SaleAmountEntry.grid_forget()
        SaleIDLabel.grid_forget()
        SaleSubmit.grid_forget()
        ControlSale.pack_forget()
        global receipt
        receipt = []
        Save()
    SaleStop = Button(ControlSale,text="Back",command=SaleStop,width=10)
    SaleStop.grid(column=2, row=8)
    
    
    #while True:
    #    item = int(input("What comic book would you like?\n")) - 1
    #    amount = int(input("How many copies of '{}'?\n".format(Name[item])))


    #    skip = int(input("1. Buy More\n2. Finish\n"))
    #    if skip == 2:
    #        break

    #i = -1
    #ItemNumber = 1
    
    #while i + 3 <= len(receipt):
    #    print("{} | {} | {} | {}".format(ItemNumber,receipt[1 + i],receipt[2 + i],receipt[3 + i]))
    #    i += 3
    #    ItemNumber += 1
    #print("\n-----=+=-----")
    #print("Total items: {}\nTotal cost: {}".format(total_amount,total_price))
    #print("\n----------=+=----------")
    #skip = input("Press 'Enter' to continue")
    #print("\n\n")
    
    #TotalSold = int(total_amount) + int(TotalSold)

    #Save()


    

#Adding new data
def Push():
    TotalSoldF.pack_forget()
    DisplayF.pack_forget()
    MenuF.pack_forget()
    ControlPush.pack()
    PushNameLabel = Label(ControlPush,text="Name:")
    PushNameLabel.grid(column=1, row=4)
    PushNameEntry = Entry(ControlPush,width=10)
    PushNameEntry.grid(column=2, row=4)

    PushStockLabel = Label(ControlPush,text="Stock:")
    PushStockLabel.grid(column=1, row=5)
    PushStockEntry = Entry(ControlPush,width=10)
    PushStockEntry.grid(column=2, row=5)

    PushPriceLabel = Label(ControlPush,text="Price:")
    PushPriceLabel.grid(column=1, row=6)
    PushPriceEntry = Entry(ControlPush,width=10)
    PushPriceEntry.grid(column=2, row=6)

    def PushStop():
        ControlPush.pack_forget()
        Save()
    PushStop = Button(ControlPush,text="Back",command=PushStop,width=10)
    PushStop.grid(column=2, row=8)
    
    def PushSubmitted():
        
        Name.append(PushNameEntry.get())
        Stock.append(PushStockEntry.get())
        Price.append(PushPriceEntry.get())

        ControlPush.pack_forget()
        Save()

    PushSubmit = Button(ControlPush,text="Submit",command=PushSubmitted,width=10)
    PushSubmit.grid(column=2, row=7)

def Reset():
    print("ran")
    if os.path.exists("database.txt"):
        os.remove("database.txt")
    f = open("database.txt", "a")
    f.write("#Name:\nBatman\nSuperman\nGreen Lantern\nAquaman\nSpiderman\nIronman\nIncredible Hulk\nCaptain America\nThor\nFantastic Four\nGuardians Of The Galaxy\nAntman\nHawkeye\nAsterix and Obelix\nMarvel\nWonder Woman\nSuper Dude\nLizard Man\nWater Woman\n-=-\n#Stock:\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n20\n8\n12\n3\n-=-\n#Price:\n14.99\n14.99\n9.99\n9.99\n14.99\n14.99\n9.99\n9.99\n9.99\n9.99\n9.99\n9.99\n9.99\n14.99\n24.99\n9.99\n4.99\n4.99\n4.99\n-=-\n#Number Sold:\n0\n")
    ControlRemove.pack_forget()
    print("[DEBUG] Restart to reset values to default")


    
#Saving information
def Save():
    
    if os.path.exists("database.txt"):
        os.remove("database.txt")
    f = open("database.txt", "a")

    i = 0
    f.write("#Name:\n")
    while i != len(Name):
        f.write("{}\n".format(Name[i]))
        i += 1
    f.write(spacer + "\n")
    f.write("#Stock:\n")
    i = 0
    while i != len(Stock):
        f.write("{}\n".format(Stock[i]))
        i += 1
    f.write(spacer + "\n")
    f.write("#Price:\n")
    i = 0
    while i != len(Price):
        f.write("{}\n".format(Price[i]))
        i += 1
    f.write(spacer + "\n")
    f.write("#Number Sold:\n")
    f.write("{}\n".format(TotalSold))
    f.close()
    Reload()



def Menu():
    
    MenuF.pack(padx=1,pady=1)
    DisplayF.pack(padx=1,pady=1)

Start()
